<?php

/**
 * @file stripe.module
 * Drupal hooks used for integrating the Stripe service.
 */

/**
 * Implements hook_help().
 */
function stripe_help($path, $arg) {
  if ($path == 'admin/config/stripe/keys') {
    $output = '<ol>';
    $output .= '<li>' . t('Enter the API keys you get from your <a href="@url">Stripe account page</a>.', array('@url' => 'https://manage.stripe.com/account')) . '</li>';
    $output .= '<li>' . t('Use the radio buttons to choose which API Key should be used with this site.') . '</li>';
    $output .= '<li>' . t('After designating an API Key, you might want to try out <a href="@url">the test form</a>.', array('@url' => '/admin/config/stripe/test')) . '</li>';
    $output .= '</ol>';
    return $output;
  }
  if ($path == 'admin/config/stripe/test') {
    return '<p>' . t('This form is to test responses from Stripe. The default values are accepted by Stripe for testing purposes. Before you can use this form, you should <a href="@url">designate an active API Key</a>.', array('@url' => '/admin/config/stripe/keys')) . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function stripe_permission() {
  return array('administer stripe');
}

/**
 * Implementation of hook_init().
 */
function stripe_init() {
	$stripe_lib_path = function_exists('libraries_get_path') ? libraries_get_path('facebook-php-sdk') : 'sites/all/libraries/stripe-php';
	$stripe_api = variable_get(STRIPE_API_FILE, $stripe_lib_path . '/lib/Stripe.php');
	
	try {
		if( ! class_exists('Stripe') && ! include($stripe_api) ) {
			drupal_set_message(t('Please install the Stripe PHP library per the instructions in the README.', 'error'));
			return;
		}
		
		drupal_set_html_head('<script src="'. check_url(url('https://js.stripe.com/v1/', array('query' => $query))) .'" type="text/javascript"></script>');
	} catch(Exception $e) {
		watchdog('warn', t('Could not load Stripe library. %e', array('%e' => $e)));
	}
}

/**
 * Implements hook_menu().
 */
function stripe_menu() {
  $items['admin/stripe'] = array(
    'title' => 'Stripe',
    'description' => 'List of what the stripe module offers.',
    'position' => 'right',
    'page callback' => 'stripe_admin_menu',
    'access arguments' => array('administer stripe'),
    'weight' => -10,
    'file' => 'stripe.admin.inc',
  );

  $items['admin/stripe/keys'] = array(
    'title' => 'Configuration',
    'description' => 'Enter API Keys and set which one should be active.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stripe_admin_keys'),
    'access arguments' => array('administer stripe'),
    'file' => 'stripe.admin.inc',
  );

  $items['admin/stripe/test'] = array(
    'title' => 'Test form',
    'description' => 'A form for testing Stripe responses.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stripe_admin_test'),
    'access arguments' => array('administer stripe'),
    'file' => 'stripe.admin.inc',
  );
  
  $items['admin/stripe/payments'] = array(
    'title' => 'Payments',
    'description' => 'A list of payments received.',
    'page callback' => 'stripe_admin_payments',
    'access arguments' => array('administer stripe'),
    'file' => 'stripe.admin.inc',
  );
  
  $items['checkout'] = array(
  	'title' => 'Checkout',
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('stripe_checkout_form'),
  	'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * May be necessary for the future if we want to handle a cart.
 */
function stripe_checkout_id() {
	$id = ($GLOBALS['user']->uid > 0) ? $GLOBALS['user']->uid : md5(uniqid(rand(), TRUE));
	
	$_SESSION['stripe_id'] = $id;
	
  return $id;
}

/**
 * Helper function to convert between cents and dollars.
 */
function stripe_transform_amount($amount) {
	if( (int)$amount == $amount) {
		$amount = (float)$amount / 100;
	} else {
		$amount = $amount * 100;
	}
	
	return $amount;
}

/**
 * Set the dollar amount and store it in session so it's available to checkout form.
 * Need to really think about the security of this. Although the session value would
 * only be used on the checkout form and used to set the amount in JS for Stripe.
 * The user would see that same amount and confirm the transaction - at which point
 * the session variable is not used. Still, not an area of expertise for me.
 *
 * Always set in CENTS so it's usable on checkout submit.
 */
function stripe_set_amount($amount) {
	$_SESSION['stripe_amount'] = (int)stripe_transform_amount((float)$amount);
}

/**
 * Create a checkout form and accept an order amount.
 */
function stripe_checkout_form(&$form_state) {
	$amount = money_format('$%i', stripe_transform_amount($_SESSION['stripe_amount']));
	
	$active_key_name = variable_get('stripe_active_key', '');
  $active_key = variable_get('stripe_' . $active_key_name, '');
  
  if ($active_key !== '' && is_numeric($_SESSION['stripe_amount'])) {
  	drupal_add_js("Stripe.setPublishableKey('{$active_key}');", 'inline');
  	
  	drupal_add_js(drupal_get_path('module', 'stripe') . '/stripe.js', 'file');
  	
  	$settings['stripeConfig'] = array();
	
		drupal_add_js($settings, 'setting');
  }

	$form['amount'] = array(
		'#type' => 'textfield',
		'#title' => t('Amount'),
		'#value' => $amount,
		'#disabled' => TRUE,
	);
	
	$form['card_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Number'),
    '#size' => 20,
    '#default_value' => '4242424242424242',
    '#attributes' => array(
      'autocomplete' => 'off',
      'class' => 'card-number',
    ),
  );

  $form['card_cvc'] = array(
    '#type' => 'textfield',
    '#title' => t('CVC'),
    '#size' => 4,
    '#default_value' => '123',
    '#attributes' => array(
      'autocomplete' => 'off',
      'class' => 'card-cvc',
    ),
  );

  $form['card_expiry_month'] = array(
    '#type' => 'textfield',
    '#title' => t('Expiration Month'),
    '#size' => 2,
    '#default_value' => '10',
    '#attributes' => array(
      'class' => 'card-expiry-month',
    ),
  );

  $form['card_expiry_year'] = array(
    '#type' => 'textfield',
    '#title' => t('Expiration Year'),
    '#size' => 2,
    '#default_value' => '2020',
    '#attributes' => array(
      'class' => 'card-expiry-year',
    ),
  );
  
  $form['submit'] = array(
  	'#type' => 'submit',
  	'#value' => t('Pay !i', array('!i' => $amount)),
  );

  return $form;
}

/**
 * Submit handler for checkout form.
 */
function stripe_checkout_form_submit($form, &$form_state) {
	$token = $_POST['stripeToken'];
	
	Stripe::setApiKey($form_state['storage']['key']);
	
	$charge = Stripe_Charge::create(array(
		"amount" => $_SESSION['stripe_amount'],
		"currency" => "usd",
		"card" => $token,
		"description" => "payinguser@example.com")
	);
}